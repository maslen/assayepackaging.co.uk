=============================
NOTES ON MAKING A GRID SYSTEM
=============================

Everyone should make their own grid system.  Use off the shelf ones to learn, but if you're a professional developer, then you should learn everything there is about responsive, so learn it by making your own.

Frameworks by their nature are bloated, ultimately we only ever want to download only what we use.  A good trade off is a micro framework that gets you started, does all the grid layout for you but doesn't do anything else.  A modular approach is good for JavaScript, so its good for a CSS grid system.

Mobile first!


1) Naming

In base file give sections of content a semantic name, not a layout name: i.e. 

	.section .sub-section

instead of 

	.row .column.three

Create layout names for column definitions in a mixin file

Then in each breakpoint media query, add mixins to sub-sections.

It's impossible to second guess semantic naming conventions for groups of content

Here's some ideas...

.group .columnFull {}
.group .columnMain {}
.group .columnSide {}

.section .columnWide {}
.section .columnStandard {}
.section .columnThin {}

.sectionWide {}
.sectionStandard {}
.sectionThin {}


.section {}
.section .columnFull {}
.section .column {}
.section .columnThin {}

.row {}
.row .columnFull {}
.row .column {}
.row .columnThin {}

.row .column .article {}

Decided to go with ".row .column" because that is how we lay our content onto the page semantically (order of content) and for presentation.  A .row is really a group of content that you want to appear on the page before content in other groups.  Then columns in a row dictate the order that you want the content to appear in a row.  This is kinda similiar to how we used to layout content with tables.

There are currently two lines of thought for naming classes:

- First is to name it semantically according to the type of content it is (i.e. <div class="news">...</div>) this doesn't work with a framework where all the presentation is done first and there is no knowledge of the content.

- Second is to use IDs for naming the content semantically and then for classes to be used purely as presentational hooks for CSS and JS.  This works for a framework but is hard for a responsive layout as something called "column1", "column2" and "column3" looses its meaning if those columns change completely depending on the media query.

I've decided to try and use a middle ground approach.  I don't know what content will be used with the framework, and the presentation will change depending on the media query.  So instead I want the developer to markup the sections of content based on how "important" each section is.

I also think there are parts of the page that - no matter what dimensions the screen is set to - always have to be presented in the same way.

First of all I break all the content in groups.  If this was using just semantic HTML5 I would use the <section> tag, but I don't want to limit the framework to HTML5 browsers only, and I want to completely seperate content semantics from presentational semantics.  So I'm using the class name "row".

.row {
	overflow: hidden;
	margin: 0 auto;
	width: $width;
}

This breaks the page into logical sections, for example...

<div id="header" class="row">...</div>
<div id="some-content" class="row">...</div>
<div id="more-content" class="row">...</div>
<div id="footer" class="row">...</div>

Row order in the HTML will always be reflected in the layout.

Rows are then split into columns.  This makes sense presentationally, but what it doesn't do is immediately define exactly how they will be styled.  It also makes sense from a content perspective.  There are different types of columns:

.row .columnFull {}

This always takes the full breadth of the row no matter what media query.

.row .column {}

A generic type of column, that will always be roughly 11 words long.














